#!/usr/bin/env node
/*
 * PLEASE USE `gypkg` in `.gyp` files
 */
'use strict';

const util = require('util');

const gypkg = require('../');

const genOptions = (argv) => {
  return argv
      .alias('f', 'freeze')
      .boolean('f')
      .describe('f', 'generate .gypkg-freeze file')
      .alias('v', 'verbose')
      .boolean('v')
      .describe('v', 'print verbose output');
};

const yargs = require('yargs')
    .usage('$0 gen project.gyp -- [optional extra args to `gyp`]')
    .command('build <gyp-file>',
             'build all projects in a .gyp file', (argv) => {
               return genOptions(argv)
                  .alias('c', 'config')
                  .default('c', 'Release')
                  .describe('c', 'configuration to build');
             })
    .command('gen <gyp-file>',
             'generate build configuration out of .gyp file', genOptions)
    .command('init [gyp-file]',
             'initialize boilerplate .gyp file')
    .command('deps', 'dependency helper to be used in `dependencies`')
    .command('type', 'dependency helper to be used in `type`')
    .alias('h', 'help')
    .help();

const argv = yargs.argv;
const cmd = argv._[0];

if (cmd === 'gen' || cmd === 'build') {
  const server = new gypkg.Server({
    verbose: argv.verbose,
    freeze: argv.freeze,
    config: cmd === 'build' && argv.config
  });

  return server.generate(argv['gyp-file'], argv._.slice(1), (err) => {
    if (err)
      throw err;

  }).on('log', (line) => {
    console.error(line);
  });
}

if (cmd === 'deps') {
  const client = new gypkg.Client({ verbose: argv.verbose });

  return client.deps(argv._.slice(1), (err, paths) => {
    if (err)
      throw err;

    console.log(paths.join('\n'));
  });
}

// TODO(indutny): This needs some serious consideration
if (cmd === 'type') {
  console.log('static_library');
  return;
}

if (cmd === 'init') {
  gypkg.commands.init(argv._.slice(1));
  return;
}

yargs.showHelp();
console.error(`Unknown command: ${cmd}`);
process.exit(1);
