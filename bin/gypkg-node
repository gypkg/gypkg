#!/usr/bin/env node
/*
 * PLEASE USE `gypkg` in `.gyp` files
 */
'use strict';

const util = require('util');

const gypkg = require('../');

const genOptions = {
  freeze: {
    alias: 'f',
    boolean: true,
    describe: 'generate .gypkg-freeze file'
  },
  verbose: {
    alias: 'v',
    boolean: true,
    describe: 'print verbose output'
  }
};

const buildOptions = util._extend({
  config: {
    alias: 'c',
    default: 'Release',
    describe: 'configuration to build'
  }
}, genOptions);

const yargs = require('yargs')
    .usage('$0 gen project.gyp -- [optional extra args to `gyp`]')
    .demand(1)
    .command('build <gyp-file>',
             'build all projects in a .gyp file', buildOptions)
    .command('gen <gyp-file>',
             'generate build configuration out of .gyp file', genOptions)
    .command('deps', 'dependency helper to be used in `dependencies`')
    .command('type', 'dependency helper to be used in `type`')
    .alias('h', 'help')
    .help();

const argv = yargs.argv;
const cmd = argv._[0];

if (cmd === 'gen' || cmd === 'build') {
  const server = new gypkg.Server({
    verbose: argv.verbose,
    freeze: argv.freeze,
    config: cmd === 'build' && argv.config
  });

  return server.generate(argv['gyp-file'], argv._.slice(1), (err) => {
    if (err)
      throw err;

  }).on('log', (line) => {
    console.error(line);
  });
}

if (cmd === 'deps') {
  const client = new gypkg.Client({ verbose: argv.verbose });

  return client.deps(argv._.slice(1), (err, paths) => {
    if (err)
      throw err;

    console.log(paths.join('\n'));
  })
}

// TODO(indutny): This needs some serious consideration
if (cmd === 'type') {
  console.log('static_library');
  return;
}

yargs.showHelp();
console.error(`Unknown command: ${cmd}`);
process.exit(1);
