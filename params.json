{
  "name": "gypkg",
  "tagline": "GYP-based package manager",
  "body": "# gypkg\r\n[![NPM version](https://badge.fury.io/js/gypkg.svg)](http://badge.fury.io/js/gypkg)\r\n[![Build Status](https://secure.travis-ci.org/gypkg/gypkg.svg)](http://travis-ci.org/gypkg/gypkg)\r\n\r\nA [GYP][0]-based package manager for C/C++ projects.\r\n\r\n## Helping project\r\n\r\nPlease check the latest [issues][6], or contribute gypkg-projects to the\r\n[wiki][7].\r\n\r\n## Why?\r\n\r\n[GYP][0] has a very lovely way to manage dependencies, however the amount of the\r\nboilerplate code required to build a project is very huge:\r\n\r\n* Project's own `gyp` repository checkout\r\n* `common.gypi` file with default compiler warning flags, etc\r\n* `gyp_project_name` executable python script to set proper [GYP][0] defines\r\n  and execute `gyp_main.py`\r\n* Dependencies checked out into the project tree\r\n\r\nAll of this has to be repeated in every project, but fear not - `gypkg` fixes\r\nthis and also a dependency management problem as well.\r\n\r\nAdditionally, `gypkg` solves the problem with duplicate sub-dependencies\r\n(`a` depends on `b` and `c`; `b` depends on `c`).\r\n\r\n## Installation\r\n\r\n```bash\r\n# Node.js is required to run this\r\nnpm install -g gypkg\r\n```\r\n\r\n## Demo\r\n\r\n[![asciicast](https://asciinema.org/a/48171.png)](https://asciinema.org/a/48171)\r\n\r\n## Usage\r\n\r\nA `build.gyp` file for a C/C++ project may be generated with `gypkg init`, and\r\nwill look like this:\r\n```python\r\n{\r\n  \"variables\": {\r\n    \"gypkg_deps\": [\r\n      # Place for `gypkg` dependencies\r\n    ],\r\n  },\r\n\r\n  \"targets\": [ {\r\n    \"target_name\": \"my-lib\",\r\n    \"type\": \"<!(gypkg type)\",\r\n\r\n    \"dependencies\": [\r\n      \"<!@(gypkg deps <(gypkg_deps))\",\r\n      # Place for local dependencies\r\n    ],\r\n\r\n    \"direct_dependent_settings\": {\r\n      \"include_dirs\": [\r\n        # Place for public includes\r\n        \"include\",\r\n      ],\r\n    },\r\n\r\n    \"include_dirs\": [\r\n      # Place for private includes\r\n      \".\",\r\n    ],\r\n\r\n    \"sources\": [\r\n      # Place for source files\r\n    ],\r\n  } ],\r\n}\r\n```\r\n\r\nDependencies could be added to `gypkg_deps`:\r\n```python\r\n\"gypkg_deps\": [\r\n  # repo-addr@semver => path/to/file.gyp:target_name\r\n  \"git://github.com/libuv/libuv@^1.9.1 => uv.gyp:libuv\",\r\n],\r\n```\r\n\r\nSource files to `sources`:\r\n```python\r\n\"sources\": [\r\n  \"src/main.c\",\r\n],\r\n```\r\n\r\nThen a `gypkg` CLI tool can be used to build a project (NOTE: while [`ninja`][5]\r\nis not necessary, it is recommended for fast incremental builds):\r\n\r\n```bash\r\ngypkg build file.gyp -- -Duv_library=static-library\r\n```\r\n\r\n`build` command will install all dependencies into `gypkg_deps` and will update\r\nthem automatically on next `build` call.\r\n\r\n## Dependency management\r\n\r\n`gypkg` supports local and remote (git) dependencies. Remote dependencies are\r\ninstalled into `gypkg_deps/` folder in the root directory of the project (the\r\none that has the main `.gyp` file). Nested dependencies still live in the same\r\n`gypkg_deps/` in the root directory.\r\n\r\nThe syntax for declaring dependencies is:\r\n\r\n* `/path/to/dependency => /sub/path/to/main.gyp:target_name` - use local\r\n  dependency\r\n* `git://github.com/author/project => /path/to/main.gyp:target_name` -\r\n  checkout the latest commit of remote dependency. Note that (`https://` and\r\n  `git@` are supported too)\r\n* `git://github.com/author/project#branch => /path/to/main.gyp:target_name` -\r\n  checkout particular branch/hash of remote dependency\r\n* `git://github.com/author/project@semver => /path/to/main.gyp:target_name` -\r\n  checkout whole repository and find the latest version-tag (the on that starts\r\n  with `v`) that matches the particular `semver`\r\n* `git://github.com/author/project@semver [gpg] => ...` -\r\n  find the latest version tag matching `semver` and verify it's\r\n  [GPG signature][9] and [`Git-EVTag-v0-SHA512`][8]. Note: this type of\r\n  dependency will maintain a project local GPG keyrings for each github team\r\n  name or explicit scope (specified with `[gpg=scope-name]`). `gypkg build` will\r\n  ask for confirmation before adding any new keys to those keyrings.\r\n\r\nSee [Usage][2] section above, or [Examples][3] below for particular gist of how\r\n[GYP][0] file may look like.\r\n\r\n## Examples\r\n\r\n* [file-shooter.gyp][1]\r\n* [bud.gyp][10]\r\n\r\n## Compatbility\r\n\r\nWhile Node.js implementation of `gypkg` loads dependencies in asynchronously and\r\nin parallel, it may be required for gypkg-based project to be distributed to\r\nthe platforms without Node.js binaries.\r\n\r\nIn this case `gypkg gen --freeze file.gyp` can be used to generate\r\n`.gypkg-freeze` file, which will help [./shim/gypkg][4] python shim in resolving\r\nall dependencies statically.\r\n\r\n`.gypkg-freeze` and [./shim/gypkg][4] should be distributed with the project in\r\nsuch cases , and the project users should be advised to extend their `PATH`\r\nenvironment variable with a folder that contains [./shim/gypkg][4] script.\r\n\r\nNOTE: no GPG signatures are checked in this mode, since it requires extensive\r\nNode.js-based tooling.\r\n\r\n## LICENSE\r\n\r\nThis software is licensed under the MIT License.\r\n\r\nCopyright Fedor Indutny, 2016.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a\r\ncopy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to permit\r\npersons to whom the Software is furnished to do so, subject to the\r\nfollowing conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included\r\nin all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\nNO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\nUSE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n[0]: https://gyp.gsrc.io/\r\n[1]: https://github.com/indutny/file-shooter/blob/master/file-shooter.gyp\r\n[2]: #usage\r\n[3]: #examples\r\n[4]: https://github.com/gypkg/gypkg/blob/master/bin/gypkg\r\n[5]: https://ninja-build.org/\r\n[6]: https://github.com/gypkg/gypkg/issues\r\n[7]: https://github.com/gypkg/gypkg/wiki/projects\r\n[8]: https://github.com/cgwalters/git-evtag\r\n[9]: https://github.com/indutny/scoped-gpg\r\n[10]: https://github.com/indutny/bud/blob/master/bud.gyp.json\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}